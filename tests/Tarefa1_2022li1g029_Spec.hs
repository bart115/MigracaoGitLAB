module Tarefa1_2022li1g029_Spec where

import LI12223
import Tarefa1_2022li1g029
import Test.HUnit

testsT1 :: Test
testsT1 = TestLabel "Testes Tarefa 1" $ test ["Teste 1, não existem arvores em rios " ~: False ~=? mapaValido1 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Arvore])])
                                              ,"Teste 1.1, não existem carros em rios " ~: False ~=? mapaValido1 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio 3,[Nenhum,Nenhum,Carro])])
                                              ,"Teste 1.2, existem troncos em rios" ~: True ~=? mapaValido1 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco])])
                                              ,"Teste 1.3, não existem troncos em estradas " ~: False ~=? mapaValido1 (Mapa 3 [(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Tronco])])
                                              ,"Teste 1.4, não existem arvores em estradas" ~: False ~=? mapaValido1 (Mapa 3 [(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Arvore])])
                                              ,"Teste 1.5, existem carros em estradas" ~: True ~=? mapaValido1 (Mapa 3 [(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Carro,Nenhum,Carro])])
                                              ,"Teste 1.6, não existem carros na relva" ~: False ~=? mapaValido1 (Mapa 3 [(Relva,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Arvore])])
                                              ,"Teste 1.7, não existem troncos na relva" ~: False ~=? mapaValido1 (Mapa 3 [(Relva,[Nenhum,Nenhum,Tronco]),(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Arvore])])
                                              ,"Teste 1.8, existem arvores na relva" ~: True ~=? mapaValido1 (Mapa 3 [(Estrada 3,[Nenhum,Nenhum,Carro]),(Estrada 3,[Nenhum,Nenhum,Carro]),(Relva,[Nenhum,Nenhum,Arvore])])
                                              ,"Teste 2, rios seguidos têm direções opostas " ~: True ~=? mapaValido2 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio (-1),[Nenhum,Nenhum,Carro]),(Rio 1,[Nenhum,Nenhum,Carro])])
                                              ,"Teste 2.1, rios seguidos,direções opostas,teste do falso" ~: False ~=? mapaValido2 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Carro]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Nenhum,Nenhum,Carro])])
                                              ,"Teste 3, troncos com mais de 5 unidades de comprimento mas sem tronco no fim" ~: False ~=? mapaValido3 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Tronco,Tronco,Tronco,Tronco,Nenhum])])
                                              ,"Teste 3.1,troncos com mais de 5 unidades de comprimento mas com tronco no fim" ~: False ~=? mapaValido3 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Tronco,Nenhum,Tronco,Tronco,Tronco])])
                                              ,"Teste 3.2, troncos com menos de 5 unidades de comprimento " ~: True ~=? mapaValido3 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Tronco,Nenhum,Nenhum,Tronco,Tronco])])
                                              ,"Teste 4, carros com mais de 3 unidades de comprimento mas sem carro no fim" ~: False ~=? mapaValido4 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Estrada 2,[Carro,Carro,Carro,Carro,Nenhum]),(Rio 1,[Tronco,Tronco,Tronco,Nenhum,Nenhum,Tronco,Tronco])])
                                              ,"Teste 4.1, carros com mais de 3 unidades de comprimento mas com carro no fim" ~: False ~=? mapaValido4 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Estrada 1,[Carro,Carro,Carro,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Tronco,Nenhum,Nenhum,Tronco,Tronco])])
                                              ,"Teste 4.2, carro com menos de 3 unidades de comprimento " ~: True ~=? mapaValido3 (Mapa 3 [(Estrada 3,[Nenhum,Nenhum,Carro]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Tronco,Nenhum,Nenhum,Tronco,Tronco])])
                                              ,"Teste 5, não existe pelo menos um nenhum na lista de obstaculos" ~: False ~=? mapaValido5 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Tronco,Tronco,Tronco])])
                                              ,"Teste 5.1, existe pelo menos um nenhum na lista de obstaculos" ~: True ~=? mapaValido5 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Nenhum,Tronco,Tronco])])
                                              ,"Teste 6, o comprimento da lista de obstaculos não corresponde á largura" ~: False ~=? mapaValido6 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Nenhum,Tronco,Tronco])])
                                              ,"Teste 6.1, o comprimento da lista de obstaculos corresponde á largura" ~: True ~=? mapaValido6 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Tronco])])
                                              ,"Teste 7, contiguamente existem mais de 4 rios seguidos " ~: False ~=? mapaValido7 (Mapa 3 [(Estrada 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Rio 1,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Nenhum,Tronco,Tronco]),(Rio 1,[Tronco,Tronco,Nenhum,Tronco,Tronco])])
                                              ,"Teste 7.1, contiguamente existem mais de 5 relvas seguidas" ~: False ~=? mapaValido7 (Mapa 3 [(Relva,[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Relva,[Nenhum,Nenhum,Carro]),(Relva,[Tronco,Tronco,Nenhum,Tronco,Tronco]),(Relva,[Tronco,Tronco,Nenhum,Tronco,Tronco])])
                                              ,"Teste 7.2, contiguamente existem mais de 5 estradas seguidas" ~: False ~=? mapaValido7 (Mapa 3 [(Estrada 1,[Nenhum,Nenhum,Tronco]),(Estrada 1,[Nenhum,Nenhum,Tronco]),(Estrada 1,[Nenhum,Nenhum,Arvore]),(Estrada 1,[Nenhum,Nenhum,Carro]),(Estrada 1,[Tronco,Tronco,Nenhum,Tronco,Tronco]),(Estrada 1,[Tronco,Tronco,Nenhum,Tronco,Tronco])])
                                              ,"Teste 7.3, contiguamente não existem mais de 4 rios seguidos" ~: True ~=? mapaValido7 (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Rio 1,[Nenhum,Nenhum,Carro]),(Rio 1,[Tronco,Tronco,Nenhum,Tronco,Tronco])])
                                              ,"Teste 8 , teste para a função principal, true " ~: True ~=? mapaValido (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio (-1),[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Estrada 1,[Carro,Nenhum,Carro]),(Rio 1,[Tronco,Nenhum,Tronco])])
                                              ,"Teste 8.1, teste para a função principal, falso velocidade do rio" ~: False ~=? mapaValido (Mapa 3 [(Rio 3,[Nenhum,Nenhum,Tronco]),(Rio 1,[Nenhum,Nenhum,Tronco]),(Relva,[Nenhum,Nenhum,Arvore]),(Estrada 1,[Carro,Carro,Carro]),(Rio 1,[Tronco,Nenhum,Tronco])])]


